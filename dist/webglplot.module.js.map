{"version":3,"file":"webglplot.module.js","sources":["../src/ColorRGBA.ts","../src/WebglBaseLine.ts","../src/WbglLine.ts","../src/WbglStep.ts","../src/WbglPolar.ts","../src/webglplot.ts"],"sourcesContent":["\nexport class ColorRGBA {\n   public r: number;\n   public g: number;\n   public b: number;\n   public a: number;\n\n   constructor(r: number, g: number, b: number, a: number) {\n      this.r = r;\n      this.g = g;\n      this.b = b;\n      this.a = a;\n   }\n}\n","import { ColorRGBA } from \"./ColorRGBA\";\n\n/**\n * Baseline class\n */\nexport class WebglBaseLine {\n  public intensity: number;\n  public visible: boolean;\n\n  /**\n   * The number of data point pairs in the line\n   */\n  public numPoints: number;\n\n  /**\n   * The data ponits for webgl array\n   * @internal\n   */\n  public xy: Float32Array;\n\n  /**\n   * The Color of the line\n   */\n  public color: ColorRGBA;\n\n  /**\n   * The horizontal scale of the line\n   * @default = 1\n   */\n  public scaleX: number;\n\n  /**\n   * The vertical sclae of the line\n   * @default = 1\n   */\n  public scaleY: number;\n\n  /**\n   * The horixontal offset of the line\n   * @default = 0\n   */\n  public offsetX: number;\n\n  /**\n   * the vertical offset of the line\n   * @default = 0\n   */\n  public offsetY: number;\n\n  /**\n   * if this is a close loop line or not\n   * @default = false\n   */\n  public loop: boolean;\n\n  /**\n   * total webgl number of points\n   * @internal\n   */\n  public webglNumPoints: number;\n\n  /**\n   * @private\n   * @internal\n   */\n  public _vbuffer: WebGLBuffer;\n\n  /**\n   * @private\n   * @internal\n   */\n  public _prog: WebGLProgram;\n\n  /**\n   * @private\n   * @internal\n   */\n  public _coord: number;\n\n  /**\n   * @internal\n   */\n  constructor() {\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.offsetX = 0;\n    this.offsetY = 0;\n\n    this.loop = false;\n\n    this._vbuffer = 0;\n    this._prog = 0;\n    this._coord = 0;\n    this.visible = true;\n    this.intensity = 1;\n  }\n}\n","import { ColorRGBA } from \"./ColorRGBA\";\nimport { WebglBaseLine } from \"./WebglBaseLine\";\n\n/**\n * The standard Line class\n */\nexport class WebglLine extends WebglBaseLine {\n  /**\n   * Create a new line\n   * @param c - the color of the line\n   * @param numPoints - number of data pints\n   * @example\n   * ```typescript\n   * x= [0,1]\n   * y= [1,2]\n   * line = new WebglLine( new ColorRGBA(0.1,0.1,0.1,1), 2);\n   * ```\n   */\n  constructor(c: ColorRGBA, numPoints: number) {\n    super();\n    this.webglNumPoints = numPoints;\n    this.numPoints = numPoints;\n    this.color = c;\n\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n  }\n\n  /**\n   * Set the X value at a specific index\n   * @param index - the index of the data point\n   * @param x - the horizontal value of the data point\n   */\n  public setX(index: number, x: number): void {\n    this.xy[index * 2] = x;\n  }\n\n  /**\n   * Set the Y value at a specific index\n   * @param index : the index of the data point\n   * @param y : the vertical value of the data point\n   */\n  public setY(index: number, y: number): void {\n    this.xy[index * 2 + 1] = y;\n  }\n\n  /**\n   * Get an X value at a specific index\n   * @param index - the index of X\n   */\n  public getX(index: number): number {\n    return this.xy[index * 2];\n  }\n\n  /**\n   * Get an Y value at a specific index\n   * @param index - the index of Y\n   */\n  public getY(index: number): number {\n    return this.xy[index * 2 + 1];\n  }\n\n  /**\n   * Make an equally spaced array of X points\n   * @param start  - the start of the series\n   * @param stepSize - step size between each data point\n   *\n   * @example\n   * ```typescript\n   * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\n   * const numX = 10;\n   * line.lineSpaceX(-1, 2 / numX);\n   * ```\n   */\n  public lineSpaceX(start: number, stepSize: number): void {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.setX(i, start + stepSize * i);\n    }\n  }\n\n  /**\n   * Set a constant value for all Y values in the line\n   * @param c - constant value\n   */\n  public constY(c: number): void {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.setY(i, c);\n    }\n  }\n\n  /**\n   * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\n   * @param data - the Y array\n   *\n   * @example\n   * ```typescript\n   * yArray = new Float32Array([3, 4, 5]);\n   * line.shiftAdd(yArray);\n   * ```\n   */\n  public shiftAdd(data: Float32Array): void {\n    const shiftSize = data.length;\n\n    for (let i = 0; i < this.numPoints - shiftSize; i++) {\n      this.setY(i, this.getY(i + shiftSize));\n    }\n\n    for (let i = 0; i < shiftSize; i++) {\n      this.setY(i + this.numPoints - shiftSize, data[i]);\n    }\n  }\n}\n","import { ColorRGBA } from \"./ColorRGBA\";\nimport { WebglBaseLine } from \"./WebglBaseLine\";\n\n/**\n * The step based line plot\n */\nexport class WebglStep extends WebglBaseLine {\n  /**\n   * Create a new step line\n   * @param c - the color of the line\n   * @param numPoints - number of data pints\n   * @example\n   * ```typescript\n   * x= [0,1]\n   * y= [1,2]\n   * line = new WebglStep( new ColorRGBA(0.1,0.1,0.1,1), 2);\n   * ```\n   */\n  constructor(c: ColorRGBA, num: number) {\n    super();\n    this.webglNumPoints = num * 2;\n    this.numPoints = num;\n    this.color = c;\n\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n  }\n\n  /**\n   * Set the Y value at a specific index\n   * @param index - the index of the data point\n   * @param y - the vertical value of the data point\n   */\n  public setY(index: number, y: number): void {\n    this.xy[index * 4 + 1] = y;\n    this.xy[index * 4 + 3] = y;\n  }\n\n  public getX(index: number): number {\n    return this.xy[index * 4];\n  }\n\n  /**\n   * Get an X value at a specific index\n   * @param index - the index of X\n   */\n  public getY(index: number): number {\n    return this.xy[index * 4 + 1];\n  }\n\n  /**\n   * Make an equally spaced array of X points\n   * @param start  - the start of the series\n   * @param stepSize - step size between each data point\n   *\n   * @example\n   * ```typescript\n   * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\n   * const numX = 10;\n   * line.lineSpaceX(-1, 2 / numX);\n   * ```\n   */\n  public lineSpaceX(start: number, stepsize: number): void {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.xy[i * 4] = start + i * stepsize;\n      this.xy[i * 4 + 2] = start + (i * stepsize + stepsize);\n    }\n  }\n\n  /**\n   * Set a constant value for all Y values in the line\n   * @param c - constant value\n   */\n  public constY(c: number): void {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.setY(i, c);\n    }\n  }\n\n  /**\n   * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\n   * @param data - the Y array\n   *\n   * @example\n   * ```typescript\n   * yArray = new Float32Array([3, 4, 5]);\n   * line.shiftAdd(yArray);\n   * ```\n   */\n  public shiftAdd(data: Float32Array): void {\n    const shiftSize = data.length;\n\n    for (let i = 0; i < this.numPoints - shiftSize; i++) {\n      this.setY(i, this.getY(i + shiftSize));\n    }\n\n    for (let i = 0; i < shiftSize; i++) {\n      this.setY(i + this.numPoints - shiftSize, data[i]);\n    }\n  }\n}\n","import { ColorRGBA } from \"./ColorRGBA\";\nimport { WebglBaseLine } from \"./WebglBaseLine\";\n\nexport class WebglPolar extends WebglBaseLine {\n  public numPoints: number;\n  public xy: Float32Array;\n  public color: ColorRGBA;\n  public intenisty: number;\n  public visible: boolean;\n  public coord: number;\n  public offsetTheta: number;\n\n  constructor(c: ColorRGBA, numPoints: number) {\n    super();\n    this.webglNumPoints = numPoints;\n    this.numPoints = numPoints;\n    this.color = c;\n    this.intenisty = 1;\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n    this._vbuffer = 0;\n    this._prog = 0;\n    this._coord = 0;\n    this.visible = true;\n\n    this.offsetTheta = 0;\n  }\n  /**\n   * @param index: index of the line\n   * @param theta : angle in deg\n   * @param r : radius\n   */\n  public setRtheta(index: number, theta: number, r: number): void {\n    //const rA = Math.abs(r);\n    //const thetaA = theta % 360;\n    const x = r * Math.cos((2 * Math.PI * (theta + this.offsetTheta)) / 360);\n    const y = r * Math.sin((2 * Math.PI * (theta + this.offsetTheta)) / 360);\n    //const index = Math.round( ((theta % 360)/360) * this.numPoints );\n    this.setX(index, x);\n    this.setY(index, y);\n  }\n\n  public getTheta(index: number): number {\n    //return Math.tan\n    return 0;\n  }\n\n  public getR(index: number): number {\n    //return Math.tan\n    return Math.sqrt(Math.pow(this.getX(index), 2) + Math.pow(this.getY(index), 2));\n  }\n\n  private setX(index: number, x: number): void {\n    this.xy[index * 2] = x;\n  }\n\n  private setY(index: number, y: number): void {\n    this.xy[index * 2 + 1] = y;\n  }\n\n  public getX(index: number): number {\n    return this.xy[index * 2];\n  }\n\n  public getY(index: number): number {\n    return this.xy[index * 2 + 1];\n  }\n\n  /*public linespaceTheta(start: number, stepsize: number): void {\n      for (let i = 0; i < this.numPoints; i++) {\n         // set x to -num/2:1:+num/2\n         this.setX(i, start + stepsize * i);  //???????????\n      }\n   }*/\n\n  /*public constR(c: number): void {\n      for (let i = 0; i < this.numPoints; i++) {\n         // set x to -num/2:1:+num/2\n         this.setRtheta(i, i*this.thetaSteps, c);\n      }\n   }*/\n\n  /*public shiftAdd(data: Float32Array): void {\n      const shiftSize = data.length;\n\n      for (let i = 0; i < this.numPoints - shiftSize; i++) {\n         this.setY(i, this.getY(i + shiftSize));\n      }\n\n      for (let i = 0; i < shiftSize; i++) {\n         this.setY(i + this.numPoints - shiftSize, data[i]);\n      }\n\n   }*/\n}\n","/**\n * Author Danial Chitnis 2019\n *\n * inspired by:\n * https://codepen.io/AzazelN28\n * https://www.tutorialspoint.com/webgl/webgl_modes_of_drawing.htm\n */\n\nimport { ColorRGBA } from \"./ColorRGBA\";\nimport { WebglLine } from \"./WbglLine\";\nimport { WebglStep } from \"./WbglStep\";\nimport { WebglPolar } from \"./WbglPolar\";\nimport { WebglBaseLine } from \"./WebglBaseLine\";\n\nexport { WebglLine, ColorRGBA, WebglStep, WebglPolar };\n\n/**\n * The main class for the webgl-plot library\n */\nexport default class WebGLPlot {\n  /**\n   * @private\n   */\n  private webgl: WebGLRenderingContext;\n\n  /**\n   * Global horizontal scale factor\n   * @default = 1.0\n   */\n  public gScaleX: number;\n\n  /**\n   * Global vertical scale factor\n   * @default = 1.0\n   */\n  public gScaleY: number;\n\n  /**\n   * Global X/Y scale ratio\n   * @default = 1\n   */\n  public gXYratio: number;\n\n  /**\n   * Global horizontal offset\n   * @default = 0\n   */\n  public gOffsetX: number;\n\n  /**\n   * Global vertical offset\n   * @default = 0\n   */\n  public gOffsetY: number;\n\n  /**\n   * collection of lines in the plot\n   */\n  public lines: WebglBaseLine[];\n\n  /**\n   * Create a webgl-plot instance\n   * @param canv - the HTML canvas in which the plot appears\n   *\n   * @example\n   * ```typescript\n   * const canv = dcoument.getEelementbyId(\"canvas\");\n   * const webglp = new WebGLplot(canv);\n   * ```\n   */\n  constructor(canv: HTMLCanvasElement) {\n    const devicePixelRatio = window.devicePixelRatio || 1;\n\n    // set the size of the drawingBuffer based on the size it's displayed.\n    canv.width = canv.clientWidth * devicePixelRatio;\n    canv.height = canv.clientHeight * devicePixelRatio;\n\n    const webgl = canv.getContext(\"webgl\", {\n      antialias: true,\n      transparent: false,\n    }) as WebGLRenderingContext;\n\n    this.lines = [];\n\n    this.webgl = webgl;\n\n    this.gScaleX = 1;\n    this.gScaleY = 1;\n    this.gXYratio = 1;\n    this.gOffsetX = 0;\n    this.gOffsetY = 0;\n\n    // Enable the depth test\n    webgl.enable(webgl.DEPTH_TEST);\n\n    // Clear the color and depth buffer\n    webgl.clear(webgl.COLOR_BUFFER_BIT || webgl.DEPTH_BUFFER_BIT);\n\n    // Set the view port\n    webgl.viewport(0, 0, canv.width, canv.height);\n  }\n\n  /**\n   * updates and redraws the content of the plot\n   */\n  public update(): void {\n    const webgl = this.webgl;\n\n    this.lines.forEach((line) => {\n      if (line.visible) {\n        webgl.useProgram(line._prog);\n\n        const uscale = webgl.getUniformLocation(line._prog, \"uscale\");\n        webgl.uniformMatrix2fv(\n          uscale,\n          false,\n          new Float32Array([\n            line.scaleX * this.gScaleX,\n            0,\n            0,\n            line.scaleY * this.gScaleY * this.gXYratio,\n          ])\n        );\n\n        const uoffset = webgl.getUniformLocation(line._prog, \"uoffset\");\n        webgl.uniform2fv(\n          uoffset,\n          new Float32Array([line.offsetX + this.gOffsetX, line.offsetY + this.gOffsetY])\n        );\n\n        const uColor = webgl.getUniformLocation(line._prog, \"uColor\");\n        webgl.uniform4fv(uColor, [line.color.r, line.color.g, line.color.b, line.color.a]);\n\n        webgl.bufferData(webgl.ARRAY_BUFFER, line.xy as ArrayBuffer, webgl.STREAM_DRAW);\n\n        webgl.drawArrays(line.loop ? webgl.LINE_LOOP : webgl.LINE_STRIP, 0, line.webglNumPoints);\n      }\n    });\n  }\n\n  public clear(): void {\n    // Clear the canvas  //??????????????????\n    //this.webgl.clearColor(0.1, 0.1, 0.1, 1.0);\n    this.webgl.clear(this.webgl.COLOR_BUFFER_BIT || this.webgl.DEPTH_BUFFER_BIT);\n  }\n\n  /**\n   * adds a line to the plot\n   * @param line - this could be any of line, linestep, histogram, or polar\n   *\n   * @example\n   * ```typescript\n   * const line = new line(color, numPoints);\n   * wglp.addLine(line);\n   * ```\n   */\n  public addLine(line: WebglBaseLine): void {\n    line._vbuffer = this.webgl.createBuffer() as WebGLBuffer;\n    this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\n    this.webgl.bufferData(this.webgl.ARRAY_BUFFER, line.xy as ArrayBuffer, this.webgl.STREAM_DRAW);\n\n    const vertCode = `\n      attribute vec2 coordinates;\n      uniform mat2 uscale;\n      uniform vec2 uoffset;\n\n      void main(void) {\n         gl_Position = vec4(uscale*coordinates + uoffset, 0.0, 1.0);\n      }`;\n\n    // Create a vertex shader object\n    const vertShader = this.webgl.createShader(this.webgl.VERTEX_SHADER);\n\n    // Attach vertex shader source code\n    this.webgl.shaderSource(vertShader as WebGLShader, vertCode);\n\n    // Compile the vertex shader\n    this.webgl.compileShader(vertShader as WebGLShader);\n\n    // Fragment shader source code\n    const fragCode = `\n         precision mediump float;\n         uniform highp vec4 uColor;\n         void main(void) {\n            gl_FragColor =  uColor;\n         }`;\n\n    const fragShader = this.webgl.createShader(this.webgl.FRAGMENT_SHADER);\n    this.webgl.shaderSource(fragShader as WebGLShader, fragCode);\n    this.webgl.compileShader(fragShader as WebGLShader);\n    line._prog = this.webgl.createProgram() as WebGLProgram;\n    this.webgl.attachShader(line._prog, vertShader as WebGLShader);\n    this.webgl.attachShader(line._prog, fragShader as WebGLShader);\n    this.webgl.linkProgram(line._prog);\n\n    this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\n\n    line._coord = this.webgl.getAttribLocation(line._prog, \"coordinates\");\n    this.webgl.vertexAttribPointer(line._coord, 2, this.webgl.FLOAT, false, 0, 0);\n    this.webgl.enableVertexAttribArray(line._coord);\n\n    this.lines.push(line);\n  }\n\n  public removeLine(index: number) {\n    //to be implemented\n  }\n\n  /**\n   * Change the WbGL viewport\n   * @param a\n   * @param b\n   * @param c\n   * @param d\n   */\n  public viewport(a: number, b: number, c: number, d: number): void {\n    this.webgl.viewport(a, b, c, d);\n  }\n}\n"],"names":["ColorRGBA","r","g","b","a","this","WebglBaseLine","scaleX","scaleY","offsetX","offsetY","loop","_vbuffer","_prog","_coord","visible","intensity","WebglLine","c","numPoints","_this","webglNumPoints","color","xy","Float32Array","setX","index","x","setY","y","getX","getY","lineSpaceX","start","stepSize","i","constY","shiftAdd","data","shiftSize","length","WebglStep","num","stepsize","WebglPolar","intenisty","offsetTheta","setRtheta","theta","Math","cos","PI","sin","getTheta","getR","sqrt","pow","WebGLPlot","canv","devicePixelRatio","window","width","clientWidth","height","clientHeight","webgl","getContext","antialias","transparent","lines","gScaleX","gScaleY","gXYratio","gOffsetX","gOffsetY","enable","DEPTH_TEST","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","update","forEach","line","useProgram","uscale","getUniformLocation","uniformMatrix2fv","uoffset","uniform2fv","uColor","uniform4fv","bufferData","ARRAY_BUFFER","STREAM_DRAW","drawArrays","LINE_LOOP","LINE_STRIP","addLine","createBuffer","bindBuffer","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","push","removeLine","d"],"mappings":"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"}